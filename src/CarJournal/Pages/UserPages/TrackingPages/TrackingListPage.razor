@page "/trackings"
@attribute [Authorize(Roles = "user")]

@implements IDisposable

@using CarJournal.Services.Client
@using CarJournal.Services.ServiceCategories
@using CarJournal.Services.ServiceRecords
@using CarJournal.Services.Trackings
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject IServiceCategoryService _categoriesService
@inject ISelectedCarService _selectedCarService
@inject IServiceRecordService _servicesService
@inject NavigationManager _naviagationManager
@inject ProtectedSessionStorage _protectedSessionStorage
@inject ITrackingService _trackingService

<MudButton Variant="Variant.Filled"
    DropShadow="false"
    Color="Color.Primary"
    Class="mb-4"
    OnClick="@ViewModel.NavigateToCreateTrackingPage">
    Create Tracking
</MudButton>

@foreach(var tracking in ViewModel.Trackings)
{
<MudCard Style="margin: 10px; padding: 20px;">
    <MudGrid>
        <MudItem xs="3" md="3">
            <MudText Typo="Typo.h6">@tracking.Name</MudText>
            <MudText Typo="Typo.h6">Last update @tracking.UpdatedAt</MudText>
            <MudText Class="mt-3" Typo="Typo.body1">@tracking.CreatedAt</MudText>
            <MudText Typo="Typo.body1" Class="mt-3 mb-3">
                @tracking.MessageForReminder
            </MudText>
            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Start" Class="mt-3">
                <MudButton Variant="@_variant" Color="Color.Primary" Class="mt-3">Details</MudButton>
                <MudButton Variant="@_variant" Color="Color.Warning" Class="mt-3">Delete</MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudCard>
<MudDivider />
}

@code {
    private TrackingListViewModel ViewModel { get; set; }
    private Variant _variant = Variant.Outlined;
    private bool _readOnly;
    private bool _isCellEditMode;
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        _selectedCarService.SelectedCarChangedAsync += OnSelectedCarChangedAsync;

        ViewModel = new TrackingListViewModel(
            _trackingService,
            _selectedCarService,
            _naviagationManager
        );

        await ViewModel.Initialize();
    }

    private async Task OnSelectedCarChangedAsync(SelectedCarData selectedCar)
    {
        await ViewModel.Initialize();
        StateHasChanged();
    }

    public void Dispose()
    {
        _selectedCarService.SelectedCarChangedAsync -= OnSelectedCarChangedAsync;
    }
}