@page "/trackings"
@attribute [Authorize(Roles = "user")]

@implements IDisposable

@using CarJournal.Services.Client
@using CarJournal.Services.ServiceCategories
@using CarJournal.Services.ServiceRecords
@using CarJournal.Services.Trackings
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject IServiceCategoryService _categoriesService
@inject ISelectedCarService _selectedCarService
@inject IServiceRecordService _servicesService
@inject NavigationManager _naviagationManager
@inject ProtectedSessionStorage _protectedSessionStorage
@inject ITrackingService _trackingService
@inject IDialogService _dialogService

<MudButton Variant="Variant.Filled"
    DropShadow="false"
    Color="Color.Primary"
    Class="mb-4"
    OnClick="@ViewModel.NavigateToCreateTrackingPage">
    Create Tracking
</MudButton>

@foreach(var tracking in ViewModel.Trackings)
{
<MudCard Style="margin: 10px; padding: 20px;">
    <MudStack>
        <MudText Typo="Typo.h6">@tracking.Name</MudText>
        <MudText Typo="Typo.h6">Last update @tracking.UpdatedAt.ToLocalTime()</MudText>
        <MudText Class="mt-3" Typo="Typo.body1">Created @tracking.CreatedAt.ToLocalTime()</MudText>
        <MudText Typo="Typo.body1" Class="mt-3 mb-3">
            @tracking.MessageForReminder
        </MudText>
        @if(@tracking.TotalMileage != null)
        {
            <MudStack Row="true">
                <MudProgressLinear
                    Color="@(@tracking.TotalMileage >= @tracking.LimitMileage ? Color.Error : Color.Success)"
                    Style="max-width: 300px;"
                    Rounded="true"
                    Size="Size.Large"
                    Value="@tracking.GetMileagePercentageProgress()" />
                <MudText>
                    @tracking?.TotalMileage / @tracking?.LimitMileage KM
                </MudText>
            </MudStack>
        }
        <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Start" >
            <MudButton Variant="@_variant"
                Color="Color.Primary"
                Class="mt-3">
                Details
            </MudButton>
            <MudButton
                Variant="@_variant"
                Color="Color.Warning"
                StartIcon="@Icons.Material.Filled.Refresh" Class="mt-3">
                Reset
            </MudButton>
            <MudButton Variant="@_variant"
                @onclick="() => DeleteRecord(tracking.Id)"
                Color="Color.Error"
                StartIcon="@Icons.Material.Filled.Delete" Class="mt-3">
                Delete
            </MudButton>
        </MudStack>
        @if(tracking.TotalMileage >= tracking.LimitMileage ||
            tracking.EndDate.HasValue &&
            tracking.EndDate.Value.Date == DateTime.Today.Date)
        {
        <MudStack AlignItems="AlignItems.Start">
            <MudButton
                Variant="@_variant"
                Color="Color.Warning"
                StartIcon="@Icons.Material.Filled.Build"
                Class="mt-3">
                Add Service
            </MudButton>
        </MudStack>
        }
    </MudStack>
</MudCard>
<MudDivider />
}

@code {
    private TrackingListViewModel ViewModel { get; set; }
    private Variant _variant = Variant.Outlined;
    private bool _readOnly;
    private bool _isCellEditMode;
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        _selectedCarService.SelectedCarChangedAsync += OnSelectedCarChangedAsync;

        ViewModel = new TrackingListViewModel(
            _trackingService,
            _selectedCarService,
            _naviagationManager
        );

        await ViewModel.Initialize();
    }
    
    private async Task DeleteRecord(int recordId)
    {
        var parameters = new DialogParameters<Delete_Dialog>
        {
            { x => x.ContentText, "Do you really want to delete these records? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error },
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await _dialogService.ShowAsync<Delete_Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if(result != null && !result.Canceled)
        {
            //await ViewModel.Delete(mileageRecordId);
        }
    }

    private async Task OnSelectedCarChangedAsync(SelectedCarData selectedCar)
    {
        await ViewModel.Initialize();
        StateHasChanged();
    }

    public void Dispose()
    {
        _selectedCarService.SelectedCarChangedAsync -= OnSelectedCarChangedAsync;
    }
}